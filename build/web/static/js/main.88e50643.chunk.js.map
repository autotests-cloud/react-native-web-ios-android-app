{"version":3,"sources":["langs.js","containers_web/LoginPage.js","containers_web/UserPage.js","AppWeb.js","serviceWorker.js","index.js"],"names":["langStrings","English","Login","Password","Language","Remember","Submit","LoginValidation","PasswordValidation","logout","Hello","Russian","lang","str","LoginPage","onLogin","onSetLang","useState","login","setLogin","password","setPassword","setLang","remember","setRemember","validation","setValidation","useEffect","v","length","langs","View","testID","style","styles","label","Text","TextInput","input","onChange","e","target","value","secureTextEntry","loginOptions","optionLabel","Picker","optionPicker","Item","CheckBox","type","submitWrapper","Button","loginButton","disabled","Object","keys","onPress","undefined","title","StyleSheet","create","textAlign","flexDirection","fontSize","marginTop","display","marginLeft","marginRight","borderColor","borderWidth","padding","paddingHorizontal","paddingVertical","justifyContent","marginBottom","alignItems","UserPage","user","App","setUser","document","querySelector","innerText","appContainer","appHeader","TouchableOpacity","logoutText","appContent","flex","fontFamily","width","flexWrap","alignSelf","height","backgroundColor","textAlignVertical","color","position","top","right","fontWeight","AppRegistry","registerComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88e50643.chunk.js","sourcesContent":["const langStrings = {\n    English: {\n        Login: \"Login\",\n        Password: \"Password\",\n        Language: \"Language\",\n        Remember: \"Remember me\",\n        Submit: \"Submit\",\n        LoginValidation: \"Login must be more than 4 characters\",\n        PasswordValidation: \"Password must be more than 4 characters\",\n        logout: \"Logout\",\n        Hello: \"Hello\",\n        \"Not authorized\": \"Not authorized\"\n\n    },\n    Russian: {\n        Login: \"Логин\",\n        Password: \"Пароль\",\n        Language: \"Язык\",\n        Remember: \"Запомнить\",\n        Submit: \"Войти\",\n        LoginValidation: \"Логин должен содержать не менее четырех символов\",\n        PasswordValidation: \"Пароль должен содержать не менее четырех символов\",\n        logout: \"Выход\",\n        Hello: \"Привет\",\n        \"Not authorized\": \"Пожалуйста, авторизуйтесь\"\n    }\n}\n\nexport default (lang=\"English\", str) => langStrings[lang][str] || str","import React, { useState, useEffect } from \"react\"\nimport {\n    StyleSheet,\n    TextInput,\n    View,\n    Text,\n    Button,\n    CheckBox,\n    Picker\n  } from 'react-native';\n\nimport langs from \"./../langs\"\n\nexport const LoginPage = ({ onLogin, onSetLang }) => {\n\n    const [ login, setLogin ] = useState(\"\")\n    const [ password, setPassword ] = useState(\"\")\n    const [ lang, setLang ] = useState(\"English\")\n    const [ remember, setRemember ] = useState(false)\n    const [ validation, setValidation ] = useState({})\n\n    useEffect(() => {\n        onSetLang(lang)\n    }, [ lang, onSetLang ])\n    \n    useEffect(() => {\n        const v = {}\n        if(login.length < 1) v.login = langs(lang, \"LoginValidation\")\n        if(password.length < 1) v.login = langs(lang, \"PasswordValidation\")\n        setValidation(v)\n    }, [ login, password, lang, remember ])\n\n    const handleLogin = () => {\n        onLogin(Object.keys(validation).length ? undefined : {\n            login, password, lang, remember\n        })\n    }\n\n    return <View testID=\"Authorization form\">\n        <View style={styles.label}>\n            <Text>{ langs(lang, \"Login\") }:</Text>\n            <TextInput style={styles.input} onChange={e => setLogin(e.target.value)} value={ login } testID=\"Login input\"/><br/>\n        </View>\n        <View style={styles.label}>\n            <Text>{ langs(lang, \"Password\") }:</Text>\n            <TextInput style={styles.input} onChange={e => setPassword(e.target.value)} value={ password } testID=\"Password input\" secureTextEntry={true}/>\n        </View>\n        <View style={styles.loginOptions}>\n            <View style={styles.optionLabel}>\n                <Text>{ langs(lang, \"Language\") }:</Text>\n                <Picker style={styles.optionPicker} value={ lang } onChange={e => setLang(e.target.value)} testID=\"Language select\">\n                    <Picker.Item label=\"Русский\" value=\"Russian\" />\n                    <Picker.Item label=\"English\" value=\"English\" />\n                </Picker>\n            </View>\n            <View style={styles.optionLabel}>\n                <CheckBox style={styles.CheckBox} value={ remember } onChange={e => setRemember(!remember)} testID=\"Remember me checkbox\" type=\"checkbox\"/> \n                <Text>{ langs(lang, \"Remember\") }</Text>\n            </View>\n        </View>\n        <View style={styles.submitWrapper}>\n            <Button style={styles.loginButton} disabled={Object.keys(validation).length > 0} testID=\"Login button\" onPress={ handleLogin } title={ langs(lang, \"Submit\") }/>\n        </View>\n    </View>\n}\n\nconst styles = StyleSheet.create({\n    label: {\n        textAlign: \"left\",\n        flexDirection: \"column\",\n        fontSize: 13,\n        marginTop: 8,\n        display: \"flex\",\n    },\n    optionLabel: {\n        textAlign: \"left\",\n        flexDirection: \"row\",\n        fontSize: 13,\n        marginTop: 8,\n        marginLeft: 16\n    },\n    CheckBox: {\n        marginRight: 8\n    },\n    optionPicker: {\n        marginLeft: 8\n    },\n    input: {\n        fontSize: 15,\n        borderColor: \"gray\",\n        borderWidth: 1,\n        marginTop: 8,\n        padding: 4,\n        marginLeft: 16\n    },\n    loginButton: {\n        borderColor: \"gray\",\n        borderWidth: 1,\n        paddingHorizontal: 16,\n        paddingVertical: 8,\n    },\n    submitWrapper: {\n        marginTop: 16,\n        marginLeft: 16,\n    },\n    loginOptions: {\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        marginTop: 32,\n        marginBottom: 32,\n        display: \"flex\",\n        alignItems: \"center\",\n    },\n  })","import React from \"react\"\nimport {\n    View,\n    Text,\n  } from 'react-native'\n\nexport const UserPage = ({ user }) => {\n    return <View style={{marginLeft: 8}}>\n            <Text testID=\"Private content\">Here is your private content #1</Text>\n            <Text testID=\"Private content\">and private content #2</Text>\n            {/* <Text>{langs(user.lang, \"Hello\")}, { user.login }!</Text> */}\n        </View>\n}","import React, { useState, useEffect } from 'react'\n\nimport {\n  // AppRegistry,\n  StyleSheet,\n  View,\n  Text,\n  TouchableOpacity,\n  AppRegistry\n} from 'react-native'\n\nimport { LoginPage } from \"./containers_web/LoginPage\"\nimport { UserPage } from \"./containers_web/UserPage\"\n\nimport langs from \"./langs\"\n\nfunction App() {\n  const [ user, setUser ] = useState()\n  const [ lang, setLang ] = useState()\n\n  useEffect(() => {\n    document.querySelector(\"title\").innerText = user ? \"Main page\" : \"Login page\"\n    setLang(user?.lang)\n  }, [ user ])\n\n  const logoutHandler = () => {\n    setUser()\n  }\n\n  return (\n    <View style={ styles.appContainer }>\n      <Text style={styles.appHeader} testID=\"Header label\">{ user ? `${langs(user.lang, \"Hello\")}, ${ user.login }!` : langs(lang, \"Not authorized\")}</Text>\n      {!user || <TouchableOpacity testID=\"Logout\" style={ styles.logout } onPress={logoutHandler}>\n          <Text style={ styles.logoutText }>{ langs(lang, \"logout\")} </Text>\n        </TouchableOpacity>\n        }\n      <View style={styles.appContent} testID=\"Content block\">\n        { user \n          ? <UserPage user={user}/> \n          : <LoginPage onLogin={ setUser } onSetLang={setLang} />\n        }\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  appContainer: {\n    flex: 1,\n    textAlign: \"center\",\n    flexDirection: \"column\",\n    fontFamily: `-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif`\n  },\n  appContent: {\n    width: 300,\n    marginTop: 32,\n    flexWrap: \"wrap\",\n    flexDirection: \"column\",\n    alignSelf: \"center\"\n  },\n  appHeader: {\n    display: \"flex\",\n    height: 60,\n    backgroundColor: \"#282c34\",\n    textAlignVertical: \"center\",\n    fontSize: 28,\n    color: \"white\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  logout: {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    height: 60,\n    fontSize: 16,\n    borderWidth: 0,\n    backgroundColor: \"rgb(33, 150, 243)\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    color: \"white\",\n    fontWeight: \"bold\",\n    paddingHorizontal: 32\n  },\n  logoutText: {\n    color: \"white\",\n  }\n})\n\nexport default App\n\nAppRegistry.registerComponent(\"RNQAguru\", () => App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './AppWeb';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}